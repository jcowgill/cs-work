#lang eopl

(provide core-scan core-parse core-eval-expr)

; Lexical specification
(define lexer-spec '(
  ; Skip all whitespace
  (white (whitespace) skip)

  ; Integers
  (number (digit (arbno digit)) number)
))

; Grammar specification
(define grammar-spec '(
  ; Primitive number expression
  (expression (number) expr-number)

  ; Subtraction
  (expression ("-" "(" expression "," expression ")") expr-sub)

  ; Zero test
  (expression ("zero?" "(" expression ")") expr-zero)

  ; Conditional
  (expression ("if" expression "then" expression "else" expression) expr-if)
))

; Define datatypes from the grammar
(sllgen:make-define-datatypes lexer-spec grammar-spec)

; Create parsers
(define core-scan  (sllgen:make-string-scanner lexer-spec grammar-spec))
(define core-parse (sllgen:make-string-parser  lexer-spec grammar-spec))

; Evaulates an expression tree generated by (core-parse)
(define (core-eval-expr tree)
  (cases expression tree
    ; Numeric expression
    (expr-number (num) num)

    ; Subtraction
    (expr-sub (left right) (- (core-eval-expr left) (core-eval-expr right)))

    ; Zero test
    (expr-zero (num) (zero? (core-eval-expr num)))

    ; Conditional
    (expr-if (expr true false)
             (if (core-eval-expr expr) (core-eval-expr true) (core-eval-expr false)))
))
